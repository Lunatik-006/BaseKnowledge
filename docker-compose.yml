x-log-env: &log-env
  LOG_LEVEL: ${LOG_LEVEL:-INFO}

services:
  api:
    # Pull prebuilt image from GHCR (built by GitHub Actions)
    image: ghcr.io/${GHCR_NAMESPACE}/baseknowledge-api:${IMAGE_TAG:-latest}
    env_file:
      - .env
    depends_on:
      postgres:
        condition: service_healthy
      milvus:
        condition: service_healthy
    ports:
      - "8000:8000"
    volumes:
      - ./config/prompts.yaml:/app/config/prompts.yaml:ro
    networks:
      - api
    environment:
      <<: *log-env
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
  miniapp:
    # Pull prebuilt image from GHCR
    image: ghcr.io/${GHCR_NAMESPACE}/baseknowledge-miniapp:${IMAGE_TAG:-latest}
    env_file:
      - .env
    depends_on:
      api:
        condition: service_healthy
    ports:
      - "3000:3000"
    networks:
      - miniapp
    environment:
      <<: *log-env
    restart: unless-stopped
  bot:
    # Pull prebuilt image from GHCR (built by GitHub Actions)
    image: ghcr.io/${GHCR_NAMESPACE}/baseknowledge-bot:${IMAGE_TAG:-latest}
    env_file:
      - .env
    depends_on:
      api:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "python apps/bot/health.py"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - api
    environment:
      <<: *log-env
    restart: unless-stopped
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      <<: *log-env
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-baseknowledge}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - api
    healthcheck:
      # Check server readiness without requiring target DB to exist
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -h localhost -p 5432"]
      interval: 5s
      timeout: 3s
      retries: 10
  milvus:
    image: milvusdb/milvus:v2.6.1
    restart: unless-stopped
    # Milvus requires an explicit command to start the standalone server.
    # Without it the container only launches `tini` which immediately exits
    # and Docker keeps restarting the service (see README for details).
    command: ["milvus", "run", "standalone"]
    environment:
      <<: *log-env
      DEPLOY_MODE: STANDALONE
      ETCD_USE_EMBED: "true"
      ETCD_DATA_DIR: /var/lib/milvus/etcd
      COMMON_STORAGETYPE: local
      LOCALSTORAGE_PATH: /var/lib/milvus/data
      MILVUS_LOGS_PATH: /var/lib/milvus/logs
      MILVUS_DATA_PATH: /var/lib/milvus/data
    ports:
      - "19530:19530"
      - "9091:9091"
      - "2379:2379"
    volumes:
      - milvus_data:/var/lib/milvus
      - ./embedEtcd.yaml:/milvus/configs/embedEtcd.yaml:ro
      - ./user.yaml:/milvus/configs/user.yaml:ro
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:9091/healthz || exit 1"]
      interval: 30s
      timeout: 20s
      start_period: 90s
      retries: 3
    networks:
      - api

  nginx:
    image: nginx:alpine
    volumes:
      - ./infra/docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - certbot-etc:/etc/letsencrypt:ro
      - certbot-web:/var/www/certbot:ro
    ports:
      - "80:80"
      - "443:443"
    networks:
      - api
      - miniapp
    environment:
      <<: *log-env

  letsencrypt:
    image: certbot/certbot
    volumes:
      - certbot-etc:/etc/letsencrypt
      - certbot-var:/var/lib/letsencrypt
      - certbot-web:/var/www/certbot
    depends_on:
      - nginx
    command: certonly --webroot --webroot-path=/var/www/certbot --email moon.nut@yandex.ru --agree-tos --no-eff-email -d mindweaver.online
    networks:
      - api
      - miniapp
    environment:
      <<: *log-env
volumes:
  postgres_data:
  milvus_data:
  certbot-etc:
  certbot-var:
  certbot-web:

networks:
  api:
  miniapp:
